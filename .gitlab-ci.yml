image: docker:20.10.16

services:
  - docker:20.10.16-dind

variables:
  DOCKER_TLS_CERTDIR: "/certs"
  CONTAINER_STAGING_IMAGE: $CI_REGISTRY_IMAGE:staging
  CONTAINER_PRODUCTION_IMAGE: $CI_REGISTRY_IMAGE:production

stages:
  - test
  - build
  - deploy_staging
  - deploy_production

test:
  stage: test
  image: python:3.9-slim
  script:
    - pip install -r requirements.txt
    - python -m pytest

build:
  stage: build
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CONTAINER_STAGING_IMAGE .
    - docker push $CONTAINER_STAGING_IMAGE

deploy_staging:
  stage: deploy_staging
  environment:
    name: staging
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CONTAINER_STAGING_IMAGE
    - docker-compose -f docker-compose.yml down
    - docker-compose -f docker-compose.yml up -d
  only:
    - main

deploy_production:
  stage: deploy_production
  environment:
    name: production
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CONTAINER_STAGING_IMAGE
    - docker tag $CONTAINER_STAGING_IMAGE $CONTAINER_PRODUCTION_IMAGE
    - docker push $CONTAINER_PRODUCTION_IMAGE
    - docker-compose -f docker-compose.prod.yml down
    - docker-compose -f docker-compose.prod.yml up -d
  when: manual
  only:
    - main
